@page "/class"

@using MudBlazor_CRUD.Models
@inject MudBlazor_CRUD.Services.IClassService _classService
@inject MudBlazor.ISnackbar snackBar


<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Classes</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="classes.class_name" Label="Class Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        
    <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Class</MudButton>
    </MudCardContent>
</MudCard>
<br />
<MudTable Elevation="25" Items="GetAllClasss()" Filter="new Func<Classes, bool>(Search)" @bind-customer="classes">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Classs</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Classs..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Class Name</MudTh> 
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.id</MudTd>
        <MudTd DataLabel="Class Name">@context.class_name</MudTd>  
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5,10,20,50}" />
    </PagerContent>
</MudTable>

@code{
    private string searchString = "";

    private Classes classes = new(); //C# 9 Syntax
    private List<Classes> classs = new();

    protected override async Task OnInitializedAsync()
    {
        GetAllClasss();
    }

    private List<Classes> GetAllClasss()
    {
        classs  = _classService.GetClasss();
        return classs;
    }
    private bool Search(Classes classes)
    {
        if (classes.class_name is not null  &&
            classes.class_name.Contains(searchString, StringComparison.OrdinalIgnoreCase) )
        {
            return true;
        }
        return false;
    }

    private void Save()
    {
        _classService.InsertClass(classes);
        snackBar.Add("Class record saved", Severity.Success);
        GetAllClasss();
    }
    private void Edit(int id)
    {
        classes = classs.FirstOrDefault(c => c.id == id);
    }
    private void Delete(int id)
    {
        _classService.DeleteClass(id);
        snackBar.Add("Class Data Deleted.", Severity.Success);
        GetAllClasss();
    }
}